import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-1423be03.js";const p={},e=t(`<h1 id="vue3的基本使用" tabindex="-1"><a class="header-anchor" href="#vue3的基本使用" aria-hidden="true">#</a> Vue3的基本使用</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><h2 id="创建实例" tabindex="-1"><a class="header-anchor" href="#创建实例" aria-hidden="true">#</a> 创建实例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="script部分" tabindex="-1"><a class="header-anchor" href="#script部分" aria-hidden="true">#</a> Script部分</h2><h3 id="compositionapi" tabindex="-1"><a class="header-anchor" href="#compositionapi" aria-hidden="true">#</a> CompositionAPI</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> myMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./mixin/index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> defineProps<span class="token punctuation">,</span> provide<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> nextTick <span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> watch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">//  setup 的执行时间是在原来的beforeCreate和created之间,所以取消了这两个生命周期函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> 
onbeforeMount<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span>
onBeforeUpdate<span class="token punctuation">,</span> onUpadted<span class="token punctuation">,</span>
onBeforeUnmount<span class="token punctuation">,</span> onUnmounted<span class="token punctuation">,</span>
onActivated<span class="token punctuation">,</span> onDeactivated<span class="token punctuation">,</span>
onErrorCaptured<span class="token punctuation">,</span> 
onRenderTracked<span class="token punctuation">,</span> onRenderTriggered<span class="token punctuation">,</span>
onServerPrefetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">import</span> Bar <span class="token keyword">from</span> <span class="token string">&#39;@/components/Bar/index.vue&#39;</span>
    
<span class="token comment">// 将功能模块封装在一个函数中</span>
<span class="token keyword">function</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        position<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
        position<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY
    <span class="token punctuation">}</span>
    
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span>upadate<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span>upadate<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 通过toRefs,传入Proxy对象，将普通对象的复制，解构后的值变成响应式对象</span>
    <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 组件名声明</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ComponentName&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// components声明</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        Bar
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// props声明</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">propsName</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span>Object<span class="token punctuation">,</span>
            <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token comment">// validtor建议在子组件中用计算属性写</span>
            <span class="token function-variable function">validator</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">&#39;Tom&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      	<span class="token literal-property property">age</span><span class="token operator">:</span>number<span class="token punctuation">,</span>
        <span class="token literal-property property">inputValue</span><span class="token operator">:</span>string
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// mixins声明</span>
    <span class="token literal-property property">mixins</span><span class="token operator">:</span><span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// extends</span>
    <span class="token keyword">extends</span><span class="token operator">:</span>ComponentA<span class="token punctuation">,</span> 
    <span class="token comment">// expose声明 1：用来限定组件暴露的属性</span>
    <span class="token literal-property property">expose</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;publicMethod&#39;</span><span class="token punctuation">]</span>
    <span class="token comment">// emits 定义能够上报的事件</span>
    <span class="token literal-property property">emits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;myEmitter&#39;</span><span class="token punctuation">]</span>
    
    <span class="token comment">// setup 的执行时间是在原来的beforeCreate和created之间</span>
    <span class="token comment">// 第一个参数 props</span>
    <span class="token comment">// 第二个参数 context --&gt; { artrs, emit, slots }</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 声明响应式数据</span>
    	<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;KEVIN&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// 声明复杂响应式数据</span>
        <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// compositionAPI 模块写法优势</span>
        <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token comment">// provide </span>
        <span class="token function">provide</span><span class="token punctuation">(</span>MessageSymbol<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// inject</span>
        <span class="token keyword">const</span> injectMessage <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>ProvideMessageSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用props</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>propsName<span class="token punctuation">)</span>
        <span class="token comment">// 使用data,调用value属性</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        
        <span class="token comment">// 计算属性</span>
        <span class="token keyword">const</span> uppercaseMessage <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>message<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 监听属性</span>
        <span class="token function">watch</span><span class="token punctuation">(</span>
      		<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>
      		<span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">inputValue changed from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      		<span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span>
    	<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 方法</span>
        <span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        
         <span class="token comment">// 在组件被挂载之前调用。</span>
        <span class="token function">onbeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 在组件被挂载之后调用。</span>
        <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 在组件即将因为一个响应式状态变更而更新其 DOM 树之前调用。</span>
        <span class="token function">onBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 在组件因为一个响应式状态变更而更新其 DOM 树之后调用。</span>
        <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 在一个组件实例被卸载之前调用。相当于Destroy</span>
        <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 在一个组件实例被卸载之后调用。相当于Destroy</span>
        <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token comment">// 访问计算属性和方法代替this方法</span>
        		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Uppercase message:&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>refs<span class="token punctuation">.</span>uppercaseMessage<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        		context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message-updated&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 在捕获了后代组件传递的错误时调用。</span>
        <span class="token function">onErrorCaptured</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件被插入到 DOM 中时调用。</span>
        <span class="token function">onActivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件从 DOM 中被移除时调用。</span>
        <span class="token function">onDeactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 当组件实例在服务器上被渲染之前要完成的异步函数。返回Promise</span>
        <span class="token function">onServerPrefetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>		
        <span class="token comment">// 注册一个调试钩子，当组件渲染过程中追踪到响应式依赖时调用。这个钩子仅在开发模式下可用。</span>
        <span class="token function">onRenderTracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// 注册一个调试钩子，当响应式依赖的变更触发了组件渲染时调用。这个钩子仅在开发模式下可用。</span>
    	<span class="token function">renderTracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    	
    
        <span class="token comment">// defineComponent 需要在此暴露需要的方法和data</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">,</span>
            message<span class="token punctuation">,</span>
            obj<span class="token punctuation">,</span>
            position<span class="token punctuation">,</span>
            myFunc
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>
      	 <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uppercaseMessage<span class="token punctuation">)</span><span class="token punctuation">,</span>
      	 <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">onClick</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>increment <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Increment count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setup语法糖" tabindex="-1"><a class="header-anchor" href="#setup语法糖" aria-hidden="true">#</a> <code>setup</code>语法糖</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
exports <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token comment">// 例如name、props等属性仍可以在此定义，如需在setup语法糖中定义，需要引入函数</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> BaseComponent <span class="token keyword">from</span> <span class="token string">&#39;./BaseComponent.js&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">&#39;./ChildComponent.vue&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineProp<span class="token punctuation">,</span> defineExpose<span class="token punctuation">,</span> withDefaults<span class="token punctuation">,</span> defineComponent <span class="token punctuation">}</span>
    <span class="token comment">// 在setup语法糖中，无需 defineComponent 函数，因为组件会自动定义,变量会默认导出,不需要return</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 定义components</span>
    
    
    <span class="token comment">// 定义extends</span>
    <span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
            ChildComponent
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
  		<span class="token keyword">extends</span><span class="token operator">:</span> BaseComponent<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用extends</span>
    MyComponent<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">logBaseMessage</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 定义props</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">customProp</span><span class="token operator">:</span><span class="token string">&quot;Default&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 定义emits</span>
     <span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parentClick&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;parentChang&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   	<span class="token comment">// 定义mixins</span>
    <span class="token keyword">const</span> mixin <span class="token operator">=</span> BaseMixin<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 定义expose</span>
    <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  		<span class="token operator">...</span>mixin
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue实例属性" tabindex="-1"><a class="header-anchor" href="#vue实例属性" aria-hidden="true">#</a> Vue实例属性</h3><ul><li><p>emit</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$emit(&#39;eventName&#39;,eventParams)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>refs</p><div class="language-VUE line-numbers-mode" data-ext="VUE"><pre class="language-VUE"><code>this.$ref.formRef
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>attrs</p></li><li><p>watch()</p></li><li><p>删除set()</p></li><li><p>删除delete</p></li><li><p>directive()</p></li><li><p>use()</p></li><li><p>store</p></li><li><p>nextTick()</p></li><li><p>once()</p></li><li><p>reactive</p><p>原observable用法</p></li><li><p>删除filter</p></li><li><p>prototype</p></li><li><p>app.config.globalProperties</p><p>替换prototype使用</p></li></ul><h2 id="style部分" tabindex="-1"><a class="header-anchor" href="#style部分" aria-hidden="true">#</a> Style部分</h2><ul><li>scoped属性</li><li>:deep伪类</li><li>:slotted(div)插槽选择器</li><li>lang预处理器</li></ul>`,14),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Vue3基本使用.html.vue"]]);export{k as default};
